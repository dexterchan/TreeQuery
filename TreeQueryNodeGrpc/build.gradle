
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.google.protobuf'

group 'org.treequery'
version "$TREEQUERY_VERSION"

archivesBaseName = "TreeQueryNodeGrpc"
sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.9'
    }
}


ext{
    grpcVersion = '1.21.0' // CURRENT_GRPC_VERSION
    protobufVersion = '3.8.0'
    protocVersion = protobufVersion
    commonscompressVersion = '1.18'
}

dependencies {
    compile project(':TreeQueryNodeBeam')
    compile project(':TreeQueryNodeProto')
    compile project(':TreeQueryDiscoveryServiceStatic')
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "org.apache.logging.log4j:log4j-core:$log4jVersion"

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonVersion}"
    compile group: 'com.google.code.gson', name: 'gson', version: "$gsonVersion"
    compile group: 'com.google.guava', name: 'guava', version: "$guavaVersion"

    testCompile group: 'org.assertj', name: 'assertj-core', version: "$assetjVersion"
    testCompile group: 'org.mockito', name: 'mockito-core', version: "$mockitVersion"
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: "$mockitVersion"

    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testCompile "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}


test {
    useJUnitPlatform {
        //includeTags 'io.beam.exp.cryptorealtime.model','controllers'
        excludeTags 'integration'
    }
    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    check.dependsOn it
    shouldRunAfter test
    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed"
    }
}


if(project.hasProperty('nexus')){
    apply from: rootProject.file('gradle/uploadNexus.gradle');
}